{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACT\\\\iphone-calculator\\\\src\\\\Components\\\\Calculator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Display from \"./Display\";\nimport Keypad from \"./Keypad\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calculator = () => {\n  _s();\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n      case \"-\":\n        return accValue - inputValue;\n      case \"x\":\n        return accValue * inputValue;\n      case \"/\":\n        return accValue / inputValue;\n      case \"=\":\n        return inputValue;\n      default:\n        return;\n    }\n  };\n  const handleClickOperator = operator => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n  const handleClickNumericKey = value => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n  const clearLastDigit = () => {\n    if (screenValue !== \"0\") if (screenValue.length > 1) setScreenValue(\"0\");else {\n      setScreenValue(screenValue.substring(0, screenValue.length - 1));\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === \"Backspace\") {\n      e.preventDefault();\n      clearLastDigit();\n    }\n  };\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n  const isScreenClear = screenValue === \"0\";\n  const reverseSign = () => {\n    setScreenValue(String(-parseFloat(screenValue)));\n  };\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n  const handleActionToPerform = (value, keyType) => {\n    const handleClickFunctionKey = value => {\n      switch (value) {\n        case \"AC\":\n          allClear();\n          break;\n        case \"C\":\n          clearScreen();\n          break;\n        case \"+/-\":\n          reverseSign();\n          break;\n        case \"%\":\n          percentage();\n          break;\n        case \".\":\n          addDecimalPoint();\n          break;\n        default:\n          return;\n      }\n    };\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"calculator-view\",\n    className: \"flex column jc-center ai-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"viewport\",\n      className: \"flex column jc-sp-between ai-center\",\n      children: [/*#__PURE__*/_jsxDEV(Display, {\n        value: screenValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Keypad, {\n        actionToPerform: handleActionToPerform,\n        allClear: isScreenClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(Calculator, \"/F1moEOo05ALldLihQycw5KnfFk=\");\n_c = Calculator;\nexport default Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useEffect","useState","Display","Keypad","jsxDEV","_jsxDEV","Calculator","_s","operate","operator","accValue","inputValue","handleClickOperator","parseFloat","screenValue","setAccValue","currentOperator","resultValue","setScreenValue","String","setExpectsOperand","setCurrentOperator","handleClickNumericKey","value","expectsOperand","clearLastDigit","length","substring","handleKeyDown","e","key","preventDefault","document","addEventListener","removeEventListener","allClear","clearScreen","isScreenClear","reverseSign","percentage","addDecimalPoint","includes","handleActionToPerform","keyType","handleClickFunctionKey","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","actionToPerform","_c","$RefreshReg$"],"sources":["D:/REACT/iphone-calculator/src/Components/Calculator.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Display from \"./Display\";\nimport Keypad from \"./Keypad\";\n\nconst Calculator = () => {\n  const operate = (operator, accValue, inputValue) => {\n    switch (operator) {\n      case \"+\":\n        return accValue + inputValue;\n      case \"-\":\n        return accValue - inputValue;\n      case \"x\":\n        return accValue * inputValue;\n      case \"/\":\n        return accValue / inputValue;\n      case \"=\":\n        return inputValue;\n      default:\n        return;\n    }\n  };\n\n  const handleClickOperator = (operator) => {\n    const inputValue = parseFloat(screenValue);\n    if (accValue === null) {\n      setAccValue(inputValue);\n    } else {\n      if (currentOperator) {\n        const resultValue = operate(currentOperator, accValue, inputValue);\n        setAccValue(resultValue);\n        setScreenValue(String(resultValue));\n      }\n    }\n    setExpectsOperand(true);\n    setCurrentOperator(operator);\n  };\n\n  const handleClickNumericKey = (value) => {\n    if (expectsOperand) {\n      setScreenValue(String(value));\n      setExpectsOperand(false);\n    } else\n      setScreenValue(screenValue === \"0\" ? String(value) : screenValue + value);\n  };\n\n  const clearLastDigit = () => {\n    if (screenValue !== \"0\")\n      if (screenValue.length > 1) setScreenValue(\"0\");\n      else {\n        setScreenValue(screenValue.substring(0, screenValue.length - 1));\n      }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Backspace\") {\n      e.preventDefault();\n      clearLastDigit();\n    }\n  };\n\n  const [accValue, setAccValue] = useState(null);\n  const [screenValue, setScreenValue] = useState(\"0\");\n  const [currentOperator, setCurrentOperator] = useState(null);\n  const [expectsOperand, setExpectsOperand] = useState(false);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n\n  const allClear = () => {\n    setAccValue(null);\n    setScreenValue(\"0\");\n    setCurrentOperator(null);\n    setExpectsOperand(false);\n  };\n\n  const clearScreen = () => {\n    setScreenValue(\"0\");\n  };\n\n  const isScreenClear = screenValue === \"0\";\n\n  const reverseSign = () => {\n    setScreenValue(String(-parseFloat(screenValue)));\n  };\n\n  const percentage = () => {\n    setScreenValue(String(parseFloat(screenValue) / 100));\n  };\n\n  const addDecimalPoint = () => {\n    if (expectsOperand) {\n      setScreenValue(\"0.\");\n    } else {\n      if (!screenValue.includes(\".\")) setScreenValue(screenValue + \".\");\n    }\n    setExpectsOperand(false);\n  };\n\n  const handleActionToPerform = (value, keyType) => {\n    const handleClickFunctionKey = (value) => {\n      switch (value) {\n        case \"AC\":\n          allClear();\n          break;\n        case \"C\":\n          clearScreen();\n          break;\n        case \"+/-\":\n          reverseSign();\n          break;\n        case \"%\":\n          percentage();\n          break;\n        case \".\":\n          addDecimalPoint();\n          break;\n        default:\n          return;\n      }\n    };\n\n    switch (keyType) {\n      case \"fx\":\n        handleClickFunctionKey(value);\n        break;\n      case \"numeric\":\n        handleClickNumericKey(value);\n        break;\n      case \"operator\":\n        handleClickOperator(value);\n        break;\n    }\n  };\n\n  return (\n    <div id=\"calculator-view\" className={\"flex column jc-center ai-center\"}>\n      <div id=\"viewport\" className={\"flex column jc-sp-between ai-center\"}>\n        <Display value={screenValue} />\n        <Keypad\n          actionToPerform={handleActionToPerform}\n          allClear={isScreenClear}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}